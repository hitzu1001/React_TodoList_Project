{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleChange","handleUpdate","handleToggle","this","removeTodo","id","setState","evt","preventDefault","alert","updateTodo","target","name","value","toggleTodo","className","onSubmit","type","onChange","completed","onClick","Component","NewTodoForm","handleSubmit","createTodo","uuid","htmlFor","placeholder","TodoList","todos","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c10c3bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isEditing: false,\r\n      task: this.props.task\r\n    };\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.toggleForm = this.toggleForm.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleUpdate = this.handleUpdate.bind(this);\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n  }\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   console.log('INSIDE COMPONENT DID UPDATE');\r\n  //   console.log(prevProps.task);\r\n  //   console.log(this.props.task);\r\n  // }\r\n  // componentWillUnmount() {\r\n  //   console.log('INSIDE COMPONENT WILL UNMOUNT');\r\n  // }\r\n\r\n  handleRemove() {\r\n    this.props.removeTodo(this.props.id);\r\n  }\r\n\r\n  toggleForm() {\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  }\r\n\r\n  handleUpdate(evt) {\r\n    evt.preventDefault();\r\n    if(this.state.task === '') {\r\n      alert('Todo item cannot be empty!');\r\n    } else {\r\n      //take new task data and pass up to parent\r\n      this.props.updateTodo(this.props.id, this.state.task);\r\n      this.setState({ isEditing: false });\r\n    }\r\n  }\r\n\r\n  handleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    })\r\n  }\r\n\r\n  handleToggle() {\r\n    this.props.toggleTodo(this.props.id);\r\n  }\r\n\r\n  render() {\r\n    let result;\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <div className=\"Todo\">\r\n          <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.task}\r\n              name=\"task\"\r\n              onChange={this.handleChange}\r\n            />\r\n            <button>Save</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    } else {\r\n      result = (\r\n        <div className=\"Todo\">\r\n          <li\r\n            className={this.props.completed ? \"Todo-task completed\" : \"Todo-task\"}\r\n            onClick={this.handleToggle}\r\n          >\r\n            {this.props.task}\r\n          </li>\r\n          <div className=\"Todo-buttons\">\r\n            <button onClick={this.toggleForm}>\r\n              <i className=\"fas fa-pencil-alt\" />\r\n            </button>\r\n            <button onClick={this.handleRemove}>\r\n              <i className=\"fas fa-trash\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport uuid from \"uuid/v4\";\r\nimport './NewTodoForm.css';\r\n\r\nclass NewTodoForm extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { task: '' };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    if(this.state.task === '') {\r\n      alert('Please enter new todo!');\r\n    } else {\r\n      this.props.createTodo({ ...this.state, id: uuid(), completed: false });\r\n      this.setState({ task: '' });\r\n    }\r\n  }\r\n\r\n  handleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n        <label htmlFor=\"task\">New Todo</label>\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"New Todo\"\r\n            id=\"task\"\r\n            name=\"task\"\r\n            value={this.state.task}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <button>Add Todo</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NewTodoForm;","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport NewTodoForm from './NewTodoForm';\r\nimport './TodoList.css';\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { todos: [] };\r\n    this.createTodo = this.createTodo.bind(this);\r\n    this.removeTodo = this.removeTodo.bind(this);\r\n    this.updateTodo = this.updateTodo.bind(this);\r\n    this.toggleCompletion = this.toggleCompletion.bind(this);\r\n  }\r\n\r\n  createTodo(newTodo) {\r\n    this.setState({\r\n      todos: [...this.state.todos, newTodo]\r\n    })\r\n  }\r\n\r\n  removeTodo(id) {\r\n    this.setState({\r\n      todos: this.state.todos.filter(t => t.id !== id)\r\n    })\r\n  }\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   console.log('INSIDE COMPONENT DID UPDATE');\r\n  //   console.log(prevState.todos);\r\n  //   console.log(this.state.todos);\r\n  // }\r\n\r\n  updateTodo(id, updatedTask) {\r\n    const updatedTodos = this.state.todos.map(todo => {\r\n      return (todo.id === id) ? { ...todo, task: updatedTask } : todo;\r\n    })\r\n    this.setState({ todos: updatedTodos });\r\n  }\r\n\r\n  toggleCompletion(id) {\r\n    const updatedTodos = this.state.todos.map(todo => {\r\n      return (todo.id === id) ? { ...todo, completed: !todo.completed } : todo;\r\n    })\r\n    this.setState({ todos: updatedTodos });\r\n  }\r\n\r\n  render() {\r\n    const todos = this.state.todos.map(todo => {\r\n      return (\r\n        <Todo\r\n          key={todo.id}\r\n          id={todo.id}\r\n          task={todo.task}\r\n          completed={todo.completed}\r\n          removeTodo={this.removeTodo}\r\n          updateTodo={this.updateTodo}\r\n          toggleTodo={this.toggleCompletion}\r\n        />\r\n      );\r\n    })\r\n    return (\r\n      <div className=\"TodoList\">\r\n        <h1>\r\n          Todo List! <span>A Simple React Todo List App.</span>\r\n        </h1>\r\n        <ul>{todos}</ul>\r\n        <NewTodoForm createTodo={this.createTodo} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />  \n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}